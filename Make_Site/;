---
title: "Hugo로 site 만들기"
date: 2021-08-17T21:26:26+09:00
#draft: false
---

{{< toc >}}

ubuntu 환경을 기준으로 한다.

---

# Site BootUp
## Hugo 설치

[Hugo 에 대한 설명과 설치] (https://ialy1595.github.io/post/blog-construct-1/)

[Hugo 공식 Quick Start] (https://gohugo.io/getting-started/quick-start/)

ubuntu에서 환경을 시작하므로 apt로 hugo를 설치한다.

```Shell
sudo apt-get install hugo
```

## 사이트 

site 이름은 prifri_site 라고 대충 정했을때

다음과 같은 명령어로 site 환경을 초기화한다.

```Shell
hugo new site prifri_site
cd prifri_site
```

directiory가 생기고 해당 directory가 workspace 개념이된다.

## 테마 다운로드

[Hugo Themes] (https://themes.gohugo.io/)

[Geekdocs] (https://geekdocs.de/usage/getting-started/)

geekdoc를 사용했다. darkmode가 바로 지원되는게 마음에 들어 그냥 이거썻다.

code study용 블로그는 주로 doc계열을 많이 사용하는거 같으며 대표적으로 learn, books등이 존재하는거 같다.

생성방법은 Geekdocs의 공식 started를 따른다.

```Shell
mkdir -p themes/hugo-geekdoc/
curl -L https://github.com/thegeeklab/hugo-geekdoc/releases/latest/download/hugo-geekdoc.tar.gz | tar -xz -C themes/hugo-geekdoc/ --strip-components=1

```

config.toml을 공식 홈페이지에서 요구하는것처럼 똑같이 수정해준다.

{{< hint info >}}
npm으로 뭘 이것저것도 잇는데 Geekdocs 테마의 original source를 build하는게 아니면 필요없다.
{{< /hint >}}

## repository 관리. workspace repository 연동

repository 가 2개 필요하다. 한개는 site의 모든 source가 있을 workspace가 존재하는 repository와 build 결과물만이 존재해
실제 site와 연동되는 repository가 필요하다.

실제 site와 연동되는 repository는 git 계정이름을 사용해서 다음과 무조건 ${NAME}.github.io로 이름을 지어야되며, 무료사용자일 경우 무조건 public으로 써야된다.

build 결과물 repository는 workspace repository의 submodule로 사용할 것다.

아마 다른 directory에 관리하는 방법으로도 되긴 하겠지만 빌드 결과물이 생기는 public directory그 자체는 바로 git
repository로 쓰는게 편한방법이라 다들 이렇게 그냥 쓰는거 같다.

일단 github에서 workspace(hugo site 생성명령어로 만들어진 directory)용 repository와 build repository를 만든다.

그리고 site directory를 workspace repository로 remote 시켜준다. prifri_site로 예로 들면 다음과 같다.

```Shell
git init
git remote add origin git@github.com:prifri/prifri_site.git
```
https://github.. 은 현재 시점에서 이제 사용하지 않는다 auth token을 써야 되는데 매번 번거로우므로 github 계정에 ssh
key를 등록시켜놓는 방법으로 사용한다.

## repository 관리. build repository 연동

현재 빌드를 한번도 안했기 때문에 build에 대한 결과물이 없으므로 빌드를 한번 해준다.

```Shell
hugo -t hugo-geekdoc
```

그러면 public directory가 생기는데 이것을 이제 build repository와 연결을 해줘야된다.

workspace repository source안에 build repository가 있는 개념이므로 submodule로 연동해준다.

```Shell
git submodule add -b origin git@github.com:prifri/prifri.github.io public
```

그후 workspace, build repository둘다 git add 후 push로 밀어보면 적당히 보이고 config.toml을 적당히 수정해서 적당히
content 만들고 해보면된다.

# Comment 생성

utteranaces를 사용했다.

[참고사이트] (https://ansohxxn.github.io/blog/utterances/)

script 복사를 하는곳은 지금 사용하고있는 Geekdocs 기준으로

```Shell
layouts/partials/page-footer.html 
```

의 제일 밑에 붙여넣으면 된다.

repository는 무조건 public으로 해야된다. private로 하면 동작안한다.

# 구글, Naver  검색에 사이트 노출 시키기

## google 검색에 사이트 노출 시키기

[참고사이트] (https://hoontaeklee.github.io/en/posts/20200112_%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84%EB%85%B8%EC%B6%9C/)
public 에 넣고 push후 좀 기다리고나서 인증요청하면된다.

### sitemap 인식이 안될경우 (사이트맵을 읽을 수 없음)

시간이 지나면 된다고 하는 경우가 있다. 나도 안되서 그냥 적당히 하다가 포기했다.
[참고사이트] (https://julynine2.tistory.com/entry/Google-Search-Console-Sitemap-couldnt-fetch)

## naver 검색에 사이트 노출 시키기

config.toml에 roboot.txt 자동생성 기능을 추가한다.
[참고사이트] (https://theissaclee.com/ko/post/robotstxtsitemaphugo/)

```Shell
# robots.txt
enableRobotsTXT = true
```

네이버 웹마스터가 [네이버 서치어드바이저] (https://searchadvisor.naver.com/)로 변경된듯 싶다.

google에 등록했을때랑 똑같이 html 파일을 받아서 public에 넣고 push한다.

robots.txt 설정도 공홈에서 제공해주는 웹마스터 가이드를 보면 자세히 나와있다.

# md 좀더 편하게 작성하기.

## stackedit
[참고사이트] (https://danggai.github.io/github.io/StackEdit%EC%97%90%EC%84%9C-Github.io%EB%A1%9C-%ED%8E%B8%ED%95%98%EA%B2%8C-%EB%B8%94%EB%A1%9C%EA%B9%85%ED%95%98%EA%B8%B0!/)
[stackedit] (https://stackedit.io/app#)
