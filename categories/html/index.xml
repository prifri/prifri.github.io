<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Goldydocs – html</title>
    <link>/categories/html/</link>
    <description>Recent content in html on Goldydocs</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 14 Jan 2022 12:46:18 +0900</lastBuildDate>
    
	  <atom:link href="/categories/html/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Docsy Theme로 변경</title>
      <link>/docs/make-site/docsy-theme%EB%A1%9C-%EB%B3%80%EA%B2%BD/</link>
      <pubDate>Fri, 14 Jan 2022 12:46:18 +0900</pubDate>
      
      <guid>/docs/make-site/docsy-theme%EB%A1%9C-%EB%B3%80%EA%B2%BD/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;search 기능을 추가하다가 잘안되고 themes를 docsy로 변경하였다.&lt;/p&gt;

&lt;/div&gt;

&lt;h1 id=&#34;docsy-설치&#34;&gt;docsy 설치&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.docsy.dev/docs/getting-started/&#34;&gt;docsy Getting started&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;hugo는 ubuntu가 18version 이상이라면 extended로 설치됬을것이다.
example site로 clone하여 사용하는걸 추천하니 그렇게 한다.
remote를 바꾸기 전까지만 따라 한다.&lt;/p&gt;
&lt;h2 id=&#34;branch-backup&#34;&gt;branch backup&lt;/h2&gt;
&lt;p&gt;docsy origin git에서 update를 계속 받아야 될것이므로 현재 master에 대한 backup brach를 만들어준다.
remote도 origin복사본을 만들어놓고, push 한다&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -b docsy_origin
git remote add docsy https://github.com/google/docsy-example.git
git push origin docsy_origin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이제 origin remote를 원래 remote로 변경한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote set-url origin git@github.com:prifri/prifri_site.git
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;git-덮어쓰기&#34;&gt;git 덮어쓰기&lt;/h2&gt;
&lt;p&gt;현재 master git과 origin과는 완전히 다른 내용일것이다. 강제로 update 시킨다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout master
git push --force origin master 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;나는 시행착오좀 겪느라 branch가 원격 저장소에 좀 생겼었는데 master, backup bracnh만 남기고 정리하고 master를 default로 한다.&lt;/p&gt;
&lt;h2 id=&#34;public을-submodule로-추가&#34;&gt;public을 submodule로 추가&lt;/h2&gt;
&lt;p&gt;geedoc에서 했던 대로 추가한다. docsy example의 .gitignore에 public이 있으므로 이를 지우고 submodule을 추가하면된다.&lt;/p&gt;
&lt;h1 id=&#34;docsy-build&#34;&gt;docsy build&lt;/h1&gt;
&lt;p&gt;hugo server -D 로 테스트를 한번 해보고 잘되면 hugo -t docsy로 build를 하고 push를 해본다.&lt;/p&gt;
&lt;h2 id=&#34;error1&#34;&gt;error1&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;import fs from &#39;fs-extra&#39;
       ^^

SyntaxError: Unexpected identifier
    at Module._compile (internal/modules/cjs/loader.js:723:23)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:831:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:623:3)
Total in 2031 ms
Error: Error building site: POSTCSS: failed to transform &amp;quot;scss/main.css&amp;quot; (text/css): /home/unit_dev64/kkr/docsy-example/node_modules/postcss-cli/index.js:3
import fs from &#39;fs-extra&#39;
       ^^

SyntaxError: Unexpected identifier
    at Module._compile (internal/modules/cjs/loader.js:723:23)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:831:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:623:3)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;nodejs version이 낮아서 그런거 같다. &lt;a href=&#34;https://github.com/google/docsy/issues/265&#34;&gt;참고사이트&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;nodejs version을 확인해본다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ node -v
v10.19.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;대충 검색해보니 v12도 있는거 같아서 v12로 다시 깔아서 해봤다.&lt;a href=&#34;https://stackoverflow.com/questions/60679889/update-node-to-v12-on-ubuntu&#34;&gt;참고사이트&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;error2&#34;&gt;error2&lt;/h2&gt;
&lt;p&gt;다음과 같은 error가 발생한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error: Error building site: POSTCSS: failed to transform &amp;quot;scss/main.css&amp;quot; (text/css): resource &amp;quot;scss/scss/main.scss_4853eb546e7a6c0898ed71feae7357c0&amp;quot; not found in file cache

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/google/docsy/issues/235&#34;&gt;참고사이트&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이것저것 설치한다&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo npm install -g postcss-cli
sudo npm install autoprefixer
sudo npm audit fix
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;다시 build 했더니 잘된다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hugo -t docsy

                   | EN | FA | NO  
-------------------+----+----+-----
  Pages            | 76 | 28 | 95  
  Paginator pages  |  0 |  0 |  0  
  Non-page files   |  3 |  3 |  1  
  Static files     | 43 | 43 | 43  
  Processed images |  7 |  7 |  2  
  Aliases          |  4 |  2 |  0  
  Sitemaps         |  2 |  1 |  1  
  Cleaned          |  0 |  0 |  0  

Total in 2477 ms
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;기존-작업했던것을-옮긴다&#34;&gt;기존 작업했던것을 옮긴다&lt;/h1&gt;
&lt;p&gt;content 작업들
google, naver 검색등록 작업들&lt;/p&gt;
&lt;h2 id=&#34;comment&#34;&gt;comment&lt;/h2&gt;
&lt;p&gt;blog와 doc의 sigle.html을 layouts에 복사해온다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p layouts/blog
mkdir -p layouts/docs
cp thems/docsy/layouts/blog/single.html layouts/blog/
cp thems/docsy/layouts/docs/single.html layouts/docs/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;그리고 end앞에 script를 복사해넣는다&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ define &amp;quot;main&amp;quot; }}
{{ .Render &amp;quot;content&amp;quot; }}
&amp;lt;script src=&amp;quot;https://utteranc.es/client.js&amp;quot;
        repo=&amp;quot;prifri/prifri_site_comments&amp;quot;
        issue-term=&amp;quot;pathname&amp;quot;
        theme=&amp;quot;github-light&amp;quot;
        crossorigin=&amp;quot;anonymous&amp;quot;
        async&amp;gt;
&amp;lt;/script&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Hugo로 site 만들기</title>
      <link>/docs/make-site/hugo%EB%A1%9C-site-%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
      <pubDate>Tue, 17 Aug 2021 21:26:26 +0900</pubDate>
      
      <guid>/docs/make-site/hugo%EB%A1%9C-site-%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;ubuntu 환경을 기준으로 한다. Theme를 geekdoc으로 만들었었던 내용에 대한정리이다.
geekdoc를 사용하면 댓글을 만들면 main page를 포함해서 댓글이 생기고,
검색기능도 추가를 해도 잘 동작이 안되서 현재 docsy로 갈아 탓다.&lt;/p&gt;

&lt;/div&gt;

&lt;hr&gt;
&lt;h1 id=&#34;site-bootup&#34;&gt;Site BootUp&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;hugo-설치&#34;&gt;Hugo 설치&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ialy1595.github.io/post/blog-construct-1/&#34;&gt;Hugo 에 대한 설명과 설치&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;Hugo 공식 Quick Start&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ubuntu에서 환경을 시작하므로 apt로 hugo를 설치한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;sudo apt-get install hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;사이트&#34;&gt;사이트&lt;/h2&gt;
&lt;p&gt;site 이름은 prifri_site 라고 대충 정했을때&lt;/p&gt;
&lt;p&gt;다음과 같은 명령어로 site 환경을 초기화한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;hugo new site prifri_site
&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; prifri_site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;directiory가 생기고 해당 directory가 workspace 개념이된다.&lt;/p&gt;
&lt;h2 id=&#34;테마-다운로드&#34;&gt;테마 다운로드&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo Themes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://geekdocs.de/usage/getting-started/&#34;&gt;Geekdocs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;geekdoc를 사용했다. darkmode가 바로 지원되는게 마음에 들어 그냥 이거썻다.&lt;/p&gt;
&lt;p&gt;code study용 블로그는 주로 doc계열을 많이 사용하는거 같으며 대표적으로 learn, books등이 존재하는거 같다.&lt;/p&gt;
&lt;p&gt;생성방법은 Geekdocs의 공식 started를 따른다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;mkdir -p themes/hugo-geekdoc/
curl -L https://github.com/thegeeklab/hugo-geekdoc/releases/latest/download/hugo-geekdoc.tar.gz &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; tar -xz -C themes/hugo-geekdoc/ --strip-components&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;config.toml을 공식 홈페이지에서 요구하는것처럼 똑같이 수정해준다.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    npm으로 뭘 이것저것도 잇는데 Geekdocs 테마의 original source를 build하는게 아니면 필요없다.

&lt;/div&gt;

&lt;h2 id=&#34;repository-관리-workspace-repository-연동&#34;&gt;repository 관리. workspace repository 연동&lt;/h2&gt;
&lt;p&gt;repository 가 2개 필요하다. 한개는 site의 모든 source가 있을 workspace가 존재하는 repository와 build 결과물만이 존재해
실제 site와 연동되는 repository가 필요하다.&lt;/p&gt;
&lt;p&gt;실제 site와 연동되는 repository는 git 계정이름을 사용해서 다음과 무조건 ${NAME}.github.io로 이름을 지어야되며, 무료사용자일 경우 무조건 public으로 써야된다.&lt;/p&gt;
&lt;p&gt;build 결과물 repository는 workspace repository의 submodule로 사용할 것다.&lt;/p&gt;
&lt;p&gt;아마 다른 directory에 관리하는 방법으로도 되긴 하겠지만 빌드 결과물이 생기는 public directory그 자체는 바로 git
repository로 쓰는게 편한방법이라 다들 이렇게 그냥 쓰는거 같다.&lt;/p&gt;
&lt;p&gt;일단 github에서 workspace(hugo site 생성명령어로 만들어진 directory)용 repository와 build repository를 만든다.&lt;/p&gt;
&lt;p&gt;그리고 site directory를 workspace repository로 remote 시켜준다. prifri_site로 예로 들면 다음과 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;git init
git remote add origin git@github.com:prifri/prifri_site.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;https://github.. 은 현재 시점에서 이제 사용하지 않는다 auth token을 써야 되는데 매번 번거로우므로 github 계정에 ssh
key를 등록시켜놓는 방법으로 사용한다.&lt;/p&gt;
&lt;h2 id=&#34;repository-관리-build-repository-연동&#34;&gt;repository 관리. build repository 연동&lt;/h2&gt;
&lt;p&gt;현재 빌드를 한번도 안했기 때문에 build에 대한 결과물이 없으므로 빌드를 한번 해준다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;hugo -t hugo-geekdoc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그러면 public directory가 생기는데 이것을 이제 build repository와 연결을 해줘야된다.&lt;/p&gt;
&lt;p&gt;workspace repository source안에 build repository가 있는 개념이므로 submodule로 연동해준다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;git submodule add -b origin git@github.com:prifri/prifri.github.io public
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그후 workspace, build repository둘다 git add 후 push로 밀어보면 적당히 보이고 config.toml을 적당히 수정해서 적당히
content 만들고 해보면된다.&lt;/p&gt;
&lt;h1 id=&#34;comment-생성&#34;&gt;Comment 생성&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;utteranaces를 사용했다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ansohxxn.github.io/blog/utterances/&#34;&gt;참고사이트&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;script 복사를 하는곳은 지금 사용하고있는 Geekdocs 기준으로&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;layouts/partials/page-footer.html 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;의 밑에 넣었더니 main page에서도 나오더라. 아마 모든 page의 아래에 대한 html인가 보다.&lt;/p&gt;
&lt;p&gt;repository는 무조건 public으로 해야된다. private로 하면 동작안한다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;구글-naver--검색에-사이트-노출-시키기&#34;&gt;구글, Naver  검색에 사이트 노출 시키기&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;sitemap-생성&#34;&gt;sitemap 생성&lt;/h2&gt;
&lt;p&gt;자동생성이 기본이지만 config.toml에서 sitmap 파라미터란것도 존재하는듯 싶다.
&lt;a href=&#34;https://theissaclee.com/ko/post/robotstxtsitemaphugo/&#34;&gt;참고사이트&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# sitemap 생성&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;sitemap&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;changefreq&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;monthly&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;filename&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;sitemap.xml&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#000&#34;&gt;priority&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; 0.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;robottxt-생성&#34;&gt;robot.txt 생성&lt;/h2&gt;
&lt;p&gt;config.toml에 roboot.txt 자동생성 기능을 추가한다. [markup] 이나 [param]같은 것 아래에서 하면 안된다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://theissaclee.com/ko/post/robotstxtsitemaphugo/&#34;&gt;참고사이트&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# robots.txt&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;enableRobotsTXT&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;google-검색에-사이트-노출-시키기&#34;&gt;google 검색에 사이트 노출 시키기&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hoontaeklee.github.io/en/posts/20200112_%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84%EB%85%B8%EC%B6%9C/&#34;&gt;참고사이트&lt;/a&gt;
public 에 넣고 push후 좀 기다리고나서 인증요청하면된다.&lt;/p&gt;
&lt;h3 id=&#34;sitemap-인식이-안될경우-사이트맵을-읽을-수-없음&#34;&gt;sitemap 인식이 안될경우 (사이트맵을 읽을 수 없음)&lt;/h3&gt;
&lt;p&gt;시간이 지나면 된다고 하는 경우가 있다. 나도 안되서 그냥 적당히 하다가 포기했다.
&lt;a href=&#34;https://julynine2.tistory.com/entry/Google-Search-Console-Sitemap-couldnt-fetch&#34;&gt;참고사이트&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;naver-검색에-사이트-노출-시키기&#34;&gt;naver 검색에 사이트 노출 시키기&lt;/h2&gt;
&lt;p&gt;네이버 웹마스터가 &lt;a href=&#34;https://searchadvisor.naver.com/&#34;&gt;네이버 서치어드바이저&lt;/a&gt;로 변경된듯 싶다.&lt;/p&gt;
&lt;p&gt;google에 등록했을때랑 똑같이 html 파일을 받아서 public에 넣어놓는다.&lt;/p&gt;
&lt;p&gt;robots.txt 설정도 공홈에서 제공해주는 웹마스터 가이드를 보면 자세히 나와있다.&lt;/p&gt;
&lt;p&gt;그리고 google에서 인증할때와 마찬가지로 naver에서도 html을 가져와야된다.&lt;/p&gt;
&lt;h3 id=&#34;site-체크&#34;&gt;site 체크&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://searchadvisor.naver.com/tools/sitecheck&#34;&gt;site check&lt;/a&gt;에 들어가서 확인해본다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;검색기능추가&#34;&gt;검색기능추가&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&#34;https://findstar.pe.kr/2021/07/10/fuse-search-on-hugo/&#34;&gt;참고사이트&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;submodule로 themes에 fuse.js를 추가한다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;md-좀더-편하게-작성하기&#34;&gt;md 좀더 편하게 작성하기.&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;stackedit&#34;&gt;stackedit&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://danggai.github.io/github.io/StackEdit%EC%97%90%EC%84%9C-Github.io%EB%A1%9C-%ED%8E%B8%ED%95%98%EA%B2%8C-%EB%B8%94%EB%A1%9C%EA%B9%85%ED%95%98%EA%B8%B0!/&#34;&gt;참고사이트&lt;/a&gt;
&lt;a href=&#34;https://stackedit.io/app#&#34;&gt;stackedit&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;layouts&#34;&gt;layouts&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;themes dir에 가보면 layouts이 존재한다. 최초의 root에서 해당 layouts이 존재하면 그걸 쓰고 아니면 themes를 사용한다.
themes 의 layouts을 직접 수정을 왠간하면 안하는게 나중에 update등을 할때 좋을것이므로 만약 layouts을 수정할 일이 있다면 root에 복사해서 쓰는게 좋다고한다.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
